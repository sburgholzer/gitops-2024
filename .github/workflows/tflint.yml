name: Lint
on:
  pull_request:
      branches:
        - staging
        - main

jobs:
  tflint:
    environment: ${{ github.base_ref == 'main' && 'production' || github.base_ref == 'staging' && 'staging' || 'staging' }}
    runs-on: ${{ matrix.os }}
    defaults:
        run:
            working-directory: ./terraform

    strategy:
      matrix:
        os: [ubuntu-latest]
    
    steps:
    - uses: actions/checkout@v4
      name: Checkout source code

    - uses: actions/cache@v4
      name: Cache plugin dir
      with:
        path: ~/.tflint.d/plugins
        key: ${{ matrix.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

    - uses: terraform-linters/setup-tflint@v4
      name: Setup TFLint
      with:
        tflint_version: v0.52.0

    - name: Show version
      run: tflint --version

    - name: Init TFLint
      run: tflint --init
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Run TFLint
      run: |
        # create output dir
        mkdir -p tflint_output

        # run TFLint asking for JSON output and save the JSON and exit code
        tflint -f json | tee tflint_output/results.json
        exit_code=${PIPESTATUS[0]}

        # Parse results and create formatted message
        echo "MESSAGE<<EOF" >> $GITHUB_ENV
        echo "### TFLint Analysis Results :mag:" >> $GITHUB_ENV

        ISSUES=$(jq -r '.issues | length' tflint_output_results.json)
        if [ $ISSUES -eq 0 ]; then
          echo "✅ No issues found" >> $GITHUB_ENV
        else
          echo "⚠️ Found $ISSUES issue(s)" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          jq -r '.issues[] | "- **\(.rule.name)** in `\(.range.filename)`:\n  - \(.message)\n  - Line: \(.range.start.line)"' tflint_output/results.json >> $GITHUB_ENV
        fi
        echo "EOF" >> $GITHUB_ENV

        exit $exit_code
      
    - name: Post Comment
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const message = process.env.MESSAGE;

          // Post new comment
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: message
          });
    