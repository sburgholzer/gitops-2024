name: Lint
on:
  pull_request:
      branches:
        - staging
        - main
permissions:
    contents: read
    pull-requests: write
jobs:
  tflint:
    environment: ${{ github.base_ref == 'main' && 'production' || github.base_ref == 'staging' && 'staging' || 'staging' }}
    runs-on: ${{ matrix.os }}
    defaults:
        run:
            working-directory: ./terraform

    strategy:
      matrix:
        os: [ubuntu-latest]
    
    steps:
    - uses: actions/checkout@v4
      name: Checkout source code

    - uses: actions/cache@v4
      name: Cache plugin dir
      with:
        path: ~/.tflint.d/plugins
        key: ${{ matrix.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

    - uses: terraform-linters/setup-tflint@v4
      name: Setup TFLint
      with:
        tflint_version: v0.52.0

    - name: Show version
      run: tflint --version

    - name: Init TFLint
      run: tflint --init
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Run TFLint
      id: tflint
      continue-on-error: true
      run: |
        # Run TFLint and capture output
        OUTPUT=$(tflint -f json 2>&1)
        EXIT_CODE=$?
        
        # Create message header
        MESSAGE="### TFLint Results :mag:\n\n"
        
        # Process Issues
        MESSAGE+="### Issues:\n"
        ISSUES=$(echo "$OUTPUT" | jq -r '.issues | length')
        if [ $ISSUES -eq 0 ]; then
          MESSAGE+="✅ No issues found\n"
        else
          MESSAGE+=$(echo "$OUTPUT" | jq -r '.issues[] | "- **Summary**: \(.summary)\n  - Message: \(.message)\n  - Severity: \(.severity)\n  - Location: \(.range.filename) Line: \(.range.start.line):\(.range.start.column)\n"')
        fi
        
        # Process Errors
        MESSAGE+="\n### Errors:\n"
        ERRORS=$(echo "$OUTPUT" | jq -r '.errors | length')
        if [ $ERRORS -eq 0 ]; then
          MESSAGE+="✅ No errors found\n"
        else
          MESSAGE+=$(echo "$OUTPUT" | jq -r '.errors[] | "- **Summary**: \(.summary)\n  - Message: \(.message)\n  - Severity: \(.severity)\n  - Location: \(.range.filename) Line: \(.range.start.line):\(.range.start.column)\n"')
        fi
        
        # Store message and exit code
        echo "tflint_message<<EOF" >> $GITHUB_ENV
        echo "$MESSAGE" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo "tflint_exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT

        - name: Find and Update PR Comment
          run: |
            # Create new comment
            curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments" \
              -d "{\"body\":$(echo "${{ env.report }}" | jq -R -s .)}"

    
    - name: Final Status Check
      if: always()
      run: |
        if [ "${{ env.tflint_exit_code }}" != "0" ]; then
          exit 1
        fi