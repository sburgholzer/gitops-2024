name: Lint
on:
  pull_request:
      branches:
        - staging
        - main
permissions:
    contents: read
    pull-requests: write
jobs:
  tflint:
    environment: ${{ github.base_ref == 'main' && 'production' || github.base_ref == 'staging' && 'staging' || 'staging' }}
    runs-on: ${{ matrix.os }}
    defaults:
        run:
            working-directory: ./terraform

    strategy:
      matrix:
        os: [ubuntu-latest]
    
    steps:
    - uses: actions/checkout@v4
      name: Checkout source code

    - uses: actions/cache@v4
      name: Cache plugin dir
      with:
        path: ~/.tflint.d/plugins
        key: ${{ matrix.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

    - uses: terraform-linters/setup-tflint@v4
      name: Setup TFLint
      with:
        tflint_version: v0.52.0

    - name: Show version
      run: tflint --version

    - name: Init TFLint
      run: tflint --init
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Run TFLint
      id: tflint
      continue-on-error: true
      run: |
        # Run TFLint and capture output
        echo "Running TFLint..."
        OUTPUT=$(tflint -f json 2>&1) || true

        # Create message header
        MESSAGE="### TFLint Results :mag:
        
        ### Issues:
        "

        # Check if OUTPUT is valid JSON
        if echo "$OUTPUT" | jq . >/dev/null 2>&1; then
          echo "Valid JSON output from TFLint"
          
          # Process Issues
          ISSUES=$(echo "$OUTPUT" | jq -r '.issues | length')
          if [ $ISSUES -eq 0 ]; then
            MESSAGE="${MESSAGE}✅ No issues found
            "
          else
            ISSUES_TEXT=$(echo "$OUTPUT" | jq -r '.issues[] | "- **Summary**: \(.summary)\n  - Message: \(.message)\n  - Severity: \(.severity)\n  - Location: \(.range.filename) Line: \(.range.start.line):\(.range.start.column)\n"')
            MESSAGE="${MESSAGE}${ISSUES_TEXT}"
          fi

          # Process Errors
          message:"${MESSAGE}#### Errors:
          "

          # ERRORS=$(echo "$OUTPUT" | jq -r '.errors | length')
          # if [ $ERRORS -eq 0 ]; then
          #   MESSAGE="${MESSAGE}✅ No errors found"
          # else
          #   ERRORS_TEXT=$(echo "$OUTPUT" | jq -r '.errors[] | "- **Summary**: \(.summary)\n  - Message: \(.message)\n  - Severity: \(.severity)\n  - Location: \(.range.filename) Line: \(.range.start.line):\(.range.start.column)\n"')
          #   MESSAGE="${MESSAGE}${ERRORS_TEXT}"
          # fi
        fi
        
        echo "$MESSAGE"
    
    # - name: Debug TFLint Message
    #   run: |
    #     echo "TFLint Message Content:"
    #     echo "${{ env.tflint_message }}"
    #     echo "---"
    #     printenv tflint_message

    - name: Find Comment
      id: found_comment
      uses: peter-evans/find-comment@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: "### TFLint Results"
    
    
    
    # - name: Create or Update Comment
    #   uses: peter-evans/create-or-update-comment@v4
    #   with:
    #     token: ${{ secrets.GITHUB_TOKEN }}
    #     comment-id: ${{ steps.found_comment.outputs.comment-id }}
    #     issue-number: ${{ github.event.pull_request.number }}
    #     body: ${{ env.tflint_message }}
    #     edit-mode: replace
    
    - name: Final Status Check
      if: always()
      run: |
        if [ "${{ env.tflint_exit_code }}" != "0" ]; then
          exit 1
        fi