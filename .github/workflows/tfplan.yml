name: 'Terraform Plan'

on:
    pull_request:
      branches:
        - staging
        - main
    workflow_call:
        secrets:
            ROLE_TO_ASSUME:
                required: true
            EXPECTED_ACCOUNT_ID:
                required: true
        inputs:
          environment:
            description: 'Environment to run the workflow in'
            type: string
            required: true
            default: 'production'
    

permissions:
    contents: read
    id-token: write
    pull-requests: write

jobs:
    terraform:
        name: 'Terraform Plan'
        runs-on: ubuntu-latest
        environment: ${{ github.base_ref == 'main' && 'production' || github.base_ref == 'staging' && 'staging' || inputs.environment }}

        defaults:
            run:
                shell: bash
                working-directory: ./terraform
        env:
            GH_TOKEN: ${{ github.token }}
            TF_VAR_BACKEND_BUCKET: ${{ vars.BUCKET_NAME }}
            TF_VAR_BACKEND_KEY: ${{ vars.STATE_KEY }}
            TF_VAR_BACKEND_REGION: ${{ vars.REGION }}
            TF_VAR_BACKEND_DYNAMODB_TABLE: ${{ vars.DYNAMODB_NAME }}
            TF_VAR_instance_type: ${{ vars.INSTANCE_TYPE }}
            TF_VAR_region: ${{ vars.REGION }}
            TF_VAR_expected_region: ${{ vars.EXPECTED_REGION }}
            TF_VAR_expected_account_id: ${{ secrets.EXPECTED_ACCOUNT_ID }}

            
        steps:
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
                aws-region: ${{ vars.REGION }}
            
            - name: Checkout
              uses: actions/checkout@v4
            
            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3
            
            - name: Terraform Init
              id: init
              run: |
                terraform init \
                -backend-config="bucket=${TF_VAR_BACKEND_BUCKET}" \
                -backend-config="key=${TF_VAR_BACKEND_KEY}" \
                -backend-config="region=${TF_VAR_BACKEND_REGION}" \
                -backend-config="encrypt=true" \
                -backend-config="dynamodb_table=${TF_VAR_BACKEND_DYNAMODB_TABLE}"

            - name: Terraform Format
              run: terraform fmt -check
            
            - name: Terraform Plan
              id: plan
              run: |
                terraform plan -out=plan.tfplan
                terraform show -json plan.tfplan > /tmp/plan.json
                cat /tmp/plan.json
            
            - name: upload Plan Artifact
              uses: actions/upload-artifact@v4
              with:
                name: terraform-plan
                path: /tmp/plan.json
                retention-days: 1
            
            - name: Setup OPA
              uses: open-policy-agent/setup-opa@v2
              with:
                version: latest
            
            - name: Run OPA Tests
              run: |
                opaout=$(opa eval --data ../policies/instance-policy.rego --input /tmp/plan.json "data.terraform.deny" | jq -r '.result[].expressions[].value[]')
                    [ -z "$opaout" ] && exit 0 || echo "$opaout" && gh pr comment ${{ github.event.pull_request.number }} --body "### $opaout" && exit 1

            - name: Find PR Comment
              uses: peter-evans/find-comment@v3
              id: comment_found
              if: ${{ !github.event.workflow }}
              with:
                token: ${{ secrets.GITHUB_TOKEN }}
                issue-number: ${{ github.event.pull_request.number }}
                body-includes: '<!-- terraform-plan-comment -->'
                comment-author: 'github-actions[bot]'
            
            - name: Extract Plan Changes
              id: plan_changes
              run: |
               changes=$(jq -r '
               .resource_changes | reduce .[] as $item (
                 {"create": 0, "update": 0, "delete": 0, "no-op": 0};
                 .[$item.change.actions[0]] += 1
               )' /tmp/plan.json)
               echo "changes=${changes}" >> $GITHUB_OUTPUT
          
            - name: Extract Resource Details
              id: resource_details
              run: |
                details=$(jq -r '
                .planned_values.root_module.resources | reduce .[] as $res (
                  {"vpc": "", "subnet": "", "security_group": "", "instance": {}};
                  if $res.type == "aws_vpc" then
                    .vpc = $res.values.cidr_block
                  elif $res.type == "aws_subnet" then
                    .subnet = $res.values.cidr_block
                  elif $res.type == "aws_security_group" then
                    .security_group = $res.values.ingress[0].from_port
                  elif $res.type == "aws_instance" then
                    .instance = {
                      "type": $res.values.instance_type,
                      "ami": $res.values.ami
                    }
                  else . end
                )' /tmp/plan.json)
                echo "details=${details}" >> $GITHUB_OUTPUT
              
            - name: Create or Update Comment
              uses: peter-evans/create-or-update-comment@v4
              if: ${{ !github.event.workflow }}
              with:
                 comment-id: ${{ steps.comment_found.outputs.comment-id }}
                 issue-number: ${{ github.event.pull_request.number }}
                 body: |
                    <!-- terraform-plan-comment -->
                    ## Terraform Plan Summary üîç
                    
                    ### Resource Changes
                    | Type | Count |
                    |------|--------|
                    | Create | ${{ fromJSON(steps.plan_changes.outputs.changes).create }} ‚ú® |
                    | Update | ${{ fromJSON(steps.plan_changes.outputs.changes).update }} üîÑ |
                    | Delete | ${{ fromJSON(steps.plan_changes.outputs.changes).delete }} üóëÔ∏è |
                    | No Changes | ${{ fromJSON(steps.plan_changes.outputs.changes)['no-op'] }} ‚úì |
                    
                    ### Infrastructure Configuration
                    - VPC CIDR: `${{ fromJSON(steps.resource_details.outputs.details).vpc }}`
                    - Subnet CIDR: `${{ fromJSON(steps.resource_details.outputs.details).subnet }}`
                    - Security Group Port: `${{ fromJSON(steps.resource_details.outputs.details).security_group }}`
                    - Instance Type: `${{ fromJSON(steps.resource_details.outputs.details).instance.type }}`
                    - AMI ID: `${{ fromJSON(steps.resource_details.outputs.details).instance.ami }}`
                    
                    <details>
                    <summary>Show Detailed Changes</summary>
                    
                    ```hcl
                    ${{ steps.plan.outputs.stdout }}
                    ```
                    </details>
                 edit-mode: replace
                 reactions: rocket
              

